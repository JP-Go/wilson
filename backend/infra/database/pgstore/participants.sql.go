// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: participants.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const confirmParticipant = `-- name: ConfirmParticipant :exec
SELECT
    "id", "trip_id", "email", "is_confirmed"
FROM participants
WHERE
    id = $1
`

func (q *Queries) ConfirmParticipant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, confirmParticipant, id)
	return err
}

const getParticipant = `-- name: GetParticipant :one
SELECT
    "id", "trip_id", "email", "is_confirmed"
FROM participants
WHERE
    id = $1
`

func (q *Queries) GetParticipant(ctx context.Context, id uuid.UUID) (Participant, error) {
	row := q.db.QueryRow(ctx, getParticipant, id)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Email,
		&i.IsConfirmed,
	)
	return i, err
}

const getParticipants = `-- name: GetParticipants :many
SELECT
    "id", "trip_id", "email", "is_confirmed"
FROM participants
WHERE
    trip_id = $1
`

func (q *Queries) GetParticipants(ctx context.Context, tripID uuid.UUID) ([]Participant, error) {
	rows, err := q.db.Query(ctx, getParticipants, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Email,
			&i.IsConfirmed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InviteParticipantsToTripParams struct {
	TripID uuid.UUID
	Email  string
}
