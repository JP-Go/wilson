// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: trips.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getTrip = `-- name: GetTrip :one
SELECT
    "id", "destination", "owner_email", "owner_name", "is_confirmed", "starts_at", "ends_at"
FROM trips
WHERE
    id = $1
`

func (q *Queries) GetTrip(ctx context.Context, id uuid.UUID) (Trip, error) {
	row := q.db.QueryRow(ctx, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.OwnerEmail,
		&i.OwnerName,
		&i.IsConfirmed,
		&i.StartsAt,
		&i.EndsAt,
	)
	return i, err
}

const insertTrip = `-- name: InsertTrip :one
INSERT
INTO trips
    ( "destination", "owner_email", "owner_name", "starts_at", "ends_at") VALUES
    ( $1, $2, $3, $4, $5 )
RETURNING "id"
`

type InsertTripParams struct {
	Destination string
	OwnerEmail  string
	OwnerName   string
	StartsAt    pgtype.Timestamp
	EndsAt      pgtype.Timestamp
}

func (q *Queries) InsertTrip(ctx context.Context, arg InsertTripParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertTrip,
		arg.Destination,
		arg.OwnerEmail,
		arg.OwnerName,
		arg.StartsAt,
		arg.EndsAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE trips
SET 
    "destination" = $1,
    "ends_at" = $2,
    "starts_at" = $3,
    "is_confirmed" = $4
WHERE
    id = $5
`

type UpdateTripParams struct {
	Destination string
	EndsAt      pgtype.Timestamp
	StartsAt    pgtype.Timestamp
	IsConfirmed bool
	ID          uuid.UUID
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.Destination,
		arg.EndsAt,
		arg.StartsAt,
		arg.IsConfirmed,
		arg.ID,
	)
	return err
}
